{"version":3,"sources":["components/Recipe/Recipe.module.css","components/fonts/BalooTamma2-Regular.ttf","components/Recipe/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","key","id","text","Math","round","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","placeholder","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,6FCD1DD,EAAOC,QAAU,IAA0B,iD,8HCkB5BC,EAfA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACzC,OACC,yBAAKC,UAAWC,IAAMC,QACrB,4BAAKN,GACL,4BACEG,EAAYI,KAAI,SAACC,GACjB,OAAO,wBAAIC,IAAKD,EAAWE,IAAKF,EAAWG,UAG7C,2BAAIC,KAAKC,MAAMZ,GAAf,SACA,yBAAKG,UAAWC,IAAMH,MAAOY,IAAKZ,EAAOa,IAAI,W,MCmDjCC,MA5Df,WACC,IADc,EAIkBC,mBAAS,IAJ3B,mBAINC,EAJM,KAIGC,EAJH,OAKgBF,mBAAS,IALzB,mBAKNG,EALM,KAKEC,EALF,OAMcJ,mBAAS,WANvB,mBAMNK,EANM,KAMCC,EAND,KAQdC,qBACC,WACCC,MAED,CAAEH,IAGH,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACKC,MAAM,mCAAD,OAAoCL,EAApC,mBAfd,WAec,oBAdb,qCAaG,cACZM,EADY,gBAECA,EAASC,OAFV,OAEZC,EAFY,OAGlBX,EAAWW,EAAKC,MAHE,2CAAH,qDAgBhB,OACC,yBAAK3B,UAAU,OACd,0BAAM4B,SARU,SAACC,GAClBA,EAAEC,iBACFX,EAASH,GACTC,EAAU,KAKkBjB,UAAU,eACpC,2BACC+B,KAAK,OACL/B,UAAU,aACVgC,MAAOhB,EACPiB,SAjBiB,SAACJ,GACrBZ,EAAUY,EAAEK,OAAOF,QAiBhBG,YAAY,wBAEb,4BAAQJ,KAAK,SAAS/B,UAAU,iBAAhC,WAID,yBAAKA,UAAU,WACbc,EAAQX,KAAI,SAACD,GAAD,OACZ,kBAAC,EAAD,CACCG,IAAKH,EAAOA,OAAOkC,MACnBxC,MAAOM,EAAOA,OAAOkC,MACrBvC,SAAUK,EAAOA,OAAOL,SACxBC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAaG,EAAOA,OAAOH,oBC5CbsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.92adf570.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"Recipe_recipe__1tdzC\",\"image\":\"Recipe_image__1GWVu\"};","module.exports = __webpack_public_path__ + \"static/media/BalooTamma2-Regular.05aa77b1.ttf\";","import React from 'react';\r\nimport style from './Recipe.module.css';\r\n\r\nconst Recipe = ({ title, calories, image, ingredients }) => {\r\n\treturn (\r\n\t\t<div className={style.recipe}>\r\n\t\t\t<h1>{title}</h1>\r\n\t\t\t<ol>\r\n\t\t\t\t{ingredients.map((ingredient) => {\r\n\t\t\t\t\treturn <li key={ingredient.id}>{ingredient.text}</li>;\r\n\t\t\t\t})}\r\n\t\t\t</ol>\r\n\t\t\t<p>{Math.round(calories)} kkal</p>\r\n\t\t\t<img className={style.image} src={image} alt=\"Dish\" />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useEffect, useState } from 'react';\nimport Recipe from './components/Recipe/Recipe';\nimport './App.css';\n\nfunction App() {\n\tconst APP_ID = '19bc9735';\n\tconst APP_KEY = 'c1bad5c444e0407e48b24632ad6e9bf2';\n\n\tconst [ recipes, setRecipes ] = useState([]);\n\tconst [ search, setSearch ] = useState('');\n\tconst [ query, setQuery ] = useState('chicken');\n\n\tuseEffect(\n\t\t() => {\n\t\t\tgetRecipes();\n\t\t},\n\t\t[ query ]\n\t);\n\n\tconst getRecipes = async () => {\n\t\tconst response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n\t\tconst data = await response.json();\n\t\tsetRecipes(data.hits);\n\t};\n\n\tconst updateSearch = (e) => {\n\t\tsetSearch(e.target.value);\n\t};\n\n\tconst getSearch = (e) => {\n\t\te.preventDefault();\n\t\tsetQuery(search);\n\t\tsetSearch('');\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<form onSubmit={getSearch} className=\"search-form\">\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclassName=\"search-bar\"\n\t\t\t\t\tvalue={search}\n\t\t\t\t\tonChange={updateSearch}\n\t\t\t\t\tplaceholder=\"Search for any dish\"\n\t\t\t\t/>\n\t\t\t\t<button type=\"submit\" className=\"search-button\">\n\t\t\t\t\tSearch\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t\t<div className=\"recipes\">\n\t\t\t\t{recipes.map((recipe) => (\n\t\t\t\t\t<Recipe\n\t\t\t\t\t\tkey={recipe.recipe.label}\n\t\t\t\t\t\ttitle={recipe.recipe.label}\n\t\t\t\t\t\tcalories={recipe.recipe.calories}\n\t\t\t\t\t\timage={recipe.recipe.image}\n\t\t\t\t\t\tingredients={recipe.recipe.ingredients}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './components/fonts/BalooTamma2-Regular.ttf';\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}